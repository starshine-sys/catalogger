// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuildInfoServiceClient is the client API for GuildInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuildInfoServiceClient interface {
	UserGuildList(ctx context.Context, in *UserGuildListRequest, opts ...grpc.CallOption) (*UserGuildListResponse, error)
	Guild(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*GuildResponse, error)
	ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error)
	GuildUserCount(ctx context.Context, in *GuildUserCountRequest, opts ...grpc.CallOption) (*GuildUserCountResponse, error)
}

type guildInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuildInfoServiceClient(cc grpc.ClientConnInterface) GuildInfoServiceClient {
	return &guildInfoServiceClient{cc}
}

func (c *guildInfoServiceClient) UserGuildList(ctx context.Context, in *UserGuildListRequest, opts ...grpc.CallOption) (*UserGuildListResponse, error) {
	out := new(UserGuildListResponse)
	err := c.cc.Invoke(ctx, "/GuildInfoService/UserGuildList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildInfoServiceClient) Guild(ctx context.Context, in *GuildRequest, opts ...grpc.CallOption) (*GuildResponse, error) {
	out := new(GuildResponse)
	err := c.cc.Invoke(ctx, "/GuildInfoService/Guild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildInfoServiceClient) ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheResponse, error) {
	out := new(ClearCacheResponse)
	err := c.cc.Invoke(ctx, "/GuildInfoService/ClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildInfoServiceClient) GuildUserCount(ctx context.Context, in *GuildUserCountRequest, opts ...grpc.CallOption) (*GuildUserCountResponse, error) {
	out := new(GuildUserCountResponse)
	err := c.cc.Invoke(ctx, "/GuildInfoService/GuildUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuildInfoServiceServer is the server API for GuildInfoService service.
// All implementations must embed UnimplementedGuildInfoServiceServer
// for forward compatibility
type GuildInfoServiceServer interface {
	UserGuildList(context.Context, *UserGuildListRequest) (*UserGuildListResponse, error)
	Guild(context.Context, *GuildRequest) (*GuildResponse, error)
	ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error)
	GuildUserCount(context.Context, *GuildUserCountRequest) (*GuildUserCountResponse, error)
	mustEmbedUnimplementedGuildInfoServiceServer()
}

// UnimplementedGuildInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGuildInfoServiceServer struct {
}

func (UnimplementedGuildInfoServiceServer) UserGuildList(context.Context, *UserGuildListRequest) (*UserGuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuildList not implemented")
}
func (UnimplementedGuildInfoServiceServer) Guild(context.Context, *GuildRequest) (*GuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guild not implemented")
}
func (UnimplementedGuildInfoServiceServer) ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}
func (UnimplementedGuildInfoServiceServer) GuildUserCount(context.Context, *GuildUserCountRequest) (*GuildUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUserCount not implemented")
}
func (UnimplementedGuildInfoServiceServer) mustEmbedUnimplementedGuildInfoServiceServer() {}

// UnsafeGuildInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuildInfoServiceServer will
// result in compilation errors.
type UnsafeGuildInfoServiceServer interface {
	mustEmbedUnimplementedGuildInfoServiceServer()
}

func RegisterGuildInfoServiceServer(s grpc.ServiceRegistrar, srv GuildInfoServiceServer) {
	s.RegisterService(&GuildInfoService_ServiceDesc, srv)
}

func _GuildInfoService_UserGuildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildInfoServiceServer).UserGuildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildInfoService/UserGuildList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildInfoServiceServer).UserGuildList(ctx, req.(*UserGuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildInfoService_Guild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildInfoServiceServer).Guild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildInfoService/Guild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildInfoServiceServer).Guild(ctx, req.(*GuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildInfoService_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildInfoServiceServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildInfoService/ClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildInfoServiceServer).ClearCache(ctx, req.(*ClearCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildInfoService_GuildUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildInfoServiceServer).GuildUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GuildInfoService/GuildUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildInfoServiceServer).GuildUserCount(ctx, req.(*GuildUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuildInfoService_ServiceDesc is the grpc.ServiceDesc for GuildInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuildInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GuildInfoService",
	HandlerType: (*GuildInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGuildList",
			Handler:    _GuildInfoService_UserGuildList_Handler,
		},
		{
			MethodName: "Guild",
			Handler:    _GuildInfoService_Guild_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _GuildInfoService_ClearCache_Handler,
		},
		{
			MethodName: "GuildUserCount",
			Handler:    _GuildInfoService_GuildUserCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/guild_info.proto",
}
